{
  "name": "new-struct",
  "version": "0.1.1",
  "description": "Structs inspired from Golang",
  "main": "index.js",
  "scripts": {
    "test": "prova"
  },
  "dependencies": {
    "mix-objects": "0.0.2",
    "methodify": "0.0.2"
  },
  "devDependencies": {
    "prova": "*"
  },
  "keywords": [
    "struct",
    "golang"
  ],
  "repository": {
    "url": "git@github.com:azer/new-struct.git",
    "type": "git"
  },
  "author": {
    "name": "Azer KoÃ§ulu",
    "email": "azer@kodfabrik.com"
  },
  "license": "BSD",
  "readme": "## new-struct\n\nA minimalistic class system designed for flexibility, functional programming. Inspired from Golang's Struct concept.\n\nMotivation:\n\n* `new-struct` is small and simple. All it does is composing functions and objects.\n* It doesn't have `new` and `this` keywords. So, you'll never have to fix scopes.\n* You can do currying, partial programming with both `new-struct` and structs.\n\nHow does a struct look?\n\n```js\nvar Struct = require('new-struct')\n\nvar Animal = Struct({\n  sleep: sleep,\n  speak: speak\n})\n\nmodule.exports = Animal;\n\nfunction sleep (animal) { console.log('zzzz'); }\n\nfunction speak (animal, text) { \n  console.log('%s says %s', animal.name, text);\n}\n```\n\nCheck out [Usage](#usage) and examples for more info about it.\n\n## Install\n\n```bash\n$ npm install new-struct\n```\n\n## Usage\n\nA new struct is defined by an object of methods:\n\n```js\nStruct = require('new-struct')\n\nAnimal = Struct({\n  sleep: sleep,\n  run: run,\n  speak: speak\n})\n\nfunction sleep (animal) {\n  console.log('zzz');\n}\n\nfunction speak (animal, sound) {\n  console.log('%s says %s', animal.name, sound)\n}\n\nfunction run (animal) {\n  console.log('%s is running', animal.name)\n}\n```\n\nTo create a an instance of the `Animal` struct, just call it with an object.\n`this` and `new` keywords are not needed, everything is just functions.\n\n```\ndongdong = Animal({ name: 'dongdong' })\nblackbear = Animal({ name: 'blackbear' })\n\ndongdong.name\n// => 'dong dong'\n\ndongdong.run()\n// dongdong is running\n\nblackbear.sleep()\n// blackbear is sleeping\n```\n\n### Factory Functions\n\nIt doesn't support constructors, but constructor-like factory functions are easy to implement:\n\n```js\nfunction NewAnimal (name, age) {\n  return Animal({ name: name, age: age })\n}\n```\n\nNote that you can attach your constructor as a static method. So, you could have such a module:\n\n```js\nAnimal = Struct({\n  New: New,\n  run: run,\n  speak: speak\n})\n\nmodule.exports = Animal;\n\nfunction New (name, age) {\n  return Animal({ name: name, age: age })\n}\n\nfunction speak (animal, sound) {\n  console.log('%s says %s', animal.name, sound)\n}\n\nfunction run (animal) {\n  console.log('%s is running', animal.name)\n}\n```\n\nThis will allow other modules requiring this have more flexibility:\n\n```js\nAnimal = require('./animal')\n\n// You can either create using constructor:\nAnimal.New('dong dong', 13)\n\n// Or calling the constructor itself:\nAnimal({ name: 'dong dong', age: 13 })\n\n// You can also access the methods of Animal:\nAnimal.methods.run({ name: 'black bear' })\n// will output: black bear is running\n```\n\n### Mixing\n\nYou can create structs that mixes other ones:\n\n```js\nAnimal = require('./animal')\n\nCat = Struct(Animal, {\n  meow: meow\n})\n\nfunction meow (cat) {\n  Animal.methods.speak(cat, 'meooww')\n}\n```\n\nNotice that each struct has a property called `methods` that keeps all the functions passed to it, including the ones derived from other structs.\n\nSee the tests and examples for more info, or create issues & send pull requests to improve the documentation.\n\n![](http://i.cloudup.com/CZR70W5Sct.png)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/azer/new-struct/issues"
  },
  "_id": "new-struct@0.1.1",
  "dist": {
    "shasum": "e7bf5d389717ca19e97d3d3c96824d828ec1a00e",
    "tarball": "http://registry.npmjs.org/new-struct/-/new-struct-0.1.1.tgz"
  },
  "_from": "new-struct@^0.1.1",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "azer",
    "email": "azer@kodfabrik.com"
  },
  "maintainers": [
    {
      "name": "azer",
      "email": "azer@kodfabrik.com"
    }
  ],
  "directories": {},
  "_shasum": "e7bf5d389717ca19e97d3d3c96824d828ec1a00e",
  "_resolved": "https://registry.npmjs.org/new-struct/-/new-struct-0.1.1.tgz",
  "homepage": "https://github.com/azer/new-struct"
}
